/* Automatically generated nanopb header */
/* Generated by nanopb-0.4.9-dev */

#ifndef PB_DRV_COMMS_CONFIG_PB_H_INCLUDED
#define PB_DRV_COMMS_CONFIG_PB_H_INCLUDED
#include <pb.h>

#if PB_PROTO_HEADER_VERSION != 40
#error Regenerate this file with the current version of nanopb generator.
#endif

/* Struct definitions */
typedef struct _Config_Callibration {
    int32_t acc_x;
    int32_t acc_y;
    int32_t acc_z;
    bool has_x_offset;
    float x_offset;
    bool has_y_offset;
    float y_offset;
    bool has_z_offset;
    float z_offset;
} Config_Callibration;

typedef struct _Config_PidConfig {
    /* leaning angle from 0 to balance_angle_scaling maps 0 to 100% throttle.
 0-1 = 0-100% */
    float p;
    /* leaning rate in deg/sec is multiplied by d */
    float d;
    float i;
    float max_i;
    bool has_i_expo;
    float i_expo;
} Config_PidConfig;

typedef struct _Config_FootPadSettings {
    float filter_rc;
    int32_t min_level_to_start;
    int32_t min_level_to_continue;
    int32_t shutoff_delay_ms;
} Config_FootPadSettings;

typedef struct _Config_BalancingConfig {
    /* min value is 1 = linear */
    float balance_expo;
    /* scale input angel in deg by deviding by 'balance_angle_scaling' */
    float balance_angle_scaling;
    int32_t max_start_angle_steer;
    int32_t shutoff_angle_steer;
    int32_t shutoff_angle_drive;
    int32_t max_update_limiter;
    float output_lpf_hz;
    /* Max rotation rate for D param is limited to 100 deg/sec by default */
    int32_t balance_d_param_limiter;
    float balance_d_param_lpf_hz;
    /* MPU6050_LPF_256HZ 0, MPU6050_LPF_188HZ 1, MPU6050_LPF_98HZ 2,
 MPU6050_LPF_42HZ 3, MPU6050_LPF_20HZ 4, MPU6050_LPF_10HZ 5,
 MPU6050_LPF_5HZ  6 Reboot required to change */
    uint32_t global_gyro_lpf;
    bool has_imu_beta;
    float imu_beta;
    /* 0 - exponential, 1 natural, 2 - poly */
    bool has_expo_type;
    int32_t expo_type;
    /* If non-zero, balance controler sends current control requests via usart
 (keep PPM wire disconnected.) */
    bool has_usart_control_scaling;
    float usart_control_scaling;
} Config_BalancingConfig;

typedef struct _Config_PusbackSettings {
    int32_t min_speed_erpm;
    float push_raise_speed_deg_sec;
    float push_release_speed_deg_sec;
    bool has_push_angle;
    float push_angle;
} Config_PusbackSettings;

typedef struct _Config_Misc {
    float throttle_rc;
    /* 0-1, 1 = 100% of output power = no warning at all */
    float throttle_threshold;
    /* Get pushback/beep if duty_cycle exceeds this threshold */
    bool has_duty_threshold;
    float duty_threshold;
    bool has_duty_rc;
    float duty_rc;
    /* Get pushback/beep if erpm exceeds this threshold */
    bool has_erpm_threshold;
    int32_t erpm_threshold;
    bool has_erpm_rc;
    float erpm_rc;
    /* Get pushback/beep if voltage drops below this threshold */
    bool has_low_volt_threshold;
    float low_volt_threshold;
    bool has_volt_rc;
    float volt_rc;
    /* length of 1 electrical rotation */
    bool has_erpm_to_dist_const;
    float erpm_to_dist_const;
    bool has_batt_cells;
    int32_t batt_cells;
} Config_Misc;

typedef struct _Config_LoadLift {
    int32_t start_current;
    float max_angle;
    float filter_rc;
    float multiplier; /* degrees = current*multiplier */
    float ramp_deg_sec; /* deg per sec. */
} Config_LoadLift;

typedef struct _Config {
    bool has_callibration;
    Config_Callibration callibration;
    Config_PidConfig angle_pid;
    Config_FootPadSettings foot_pad;
    Config_BalancingConfig balance_settings;
    Config_Misc misc;
    bool has_pushback;
    Config_PusbackSettings pushback;
    bool has_load_lift;
    Config_LoadLift load_lift;
    Config_PidConfig rate_pid;
} Config;

typedef struct _Stats {
    float batt_voltage;
    float batt_current;
    float motor_current;
    float speed;
    float distance_traveled;
    float drive_angle;
    float steer_angle;
    uint32_t pad_pressure1;
    uint32_t pad_pressure2;
    float motor_duty;
    float esc_temp;
    float motor_temp;
    float cell_voltage;
} Stats;


#ifdef __cplusplus
extern "C" {
#endif

/* Initializer values for message structs */
#define Config_init_default                      {false, Config_Callibration_init_default, Config_PidConfig_init_default, Config_FootPadSettings_init_default, Config_BalancingConfig_init_default, Config_Misc_init_default, false, Config_PusbackSettings_init_default, false, Config_LoadLift_init_default, Config_PidConfig_init_default}
#define Config_Callibration_init_default         {0, 0, 0, false, 0.0f, false, 0.0f, false, 0.0f}
#define Config_PidConfig_init_default            {1.0f, 0.005f, 0.001f, 0.006f, false, 0.0f}
#define Config_FootPadSettings_init_default      {0.05f, 3300, 2000, 100}
#define Config_BalancingConfig_init_default      {0.15f, 15.0f, 15, 40, 14, 300, 100.0f, 100, 50.0f, 2u, false, 0.02f, false, 0, false, 0.0f}
#define Config_PusbackSettings_init_default      {100000, 0.5f, 0.2f, false, 5.0f}
#define Config_Misc_init_default                 {0.05f, 0.75f, false, 0.75f, false, 0.25f, false, 6000, false, 0.25f, false, 45.0f, false, 0.25f, false, 1.0f, false, 1}
#define Config_LoadLift_init_default             {10, 5.0f, 0.05f, 0.1f, 0.5f}
#define Stats_init_default                       {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0}
#define Config_init_zero                         {false, Config_Callibration_init_zero, Config_PidConfig_init_zero, Config_FootPadSettings_init_zero, Config_BalancingConfig_init_zero, Config_Misc_init_zero, false, Config_PusbackSettings_init_zero, false, Config_LoadLift_init_zero, Config_PidConfig_init_zero}
#define Config_Callibration_init_zero            {0, 0, 0, false, 0, false, 0, false, 0}
#define Config_PidConfig_init_zero               {0, 0, 0, 0, false, 0}
#define Config_FootPadSettings_init_zero         {0, 0, 0, 0}
#define Config_BalancingConfig_init_zero         {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, false, 0, false, 0, false, 0}
#define Config_PusbackSettings_init_zero         {0, 0, 0, false, 0}
#define Config_Misc_init_zero                    {0, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0}
#define Config_LoadLift_init_zero                {0, 0, 0, 0, 0}
#define Stats_init_zero                          {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0}

/* Field tags (for use in manual encoding/decoding) */
#define Config_Callibration_acc_x_tag            1
#define Config_Callibration_acc_y_tag            2
#define Config_Callibration_acc_z_tag            3
#define Config_Callibration_x_offset_tag         4
#define Config_Callibration_y_offset_tag         5
#define Config_Callibration_z_offset_tag         6
#define Config_PidConfig_p_tag                   1
#define Config_PidConfig_d_tag                   2
#define Config_PidConfig_i_tag                   3
#define Config_PidConfig_max_i_tag               4
#define Config_PidConfig_i_expo_tag              13
#define Config_FootPadSettings_filter_rc_tag     1
#define Config_FootPadSettings_min_level_to_start_tag 2
#define Config_FootPadSettings_min_level_to_continue_tag 3
#define Config_FootPadSettings_shutoff_delay_ms_tag 4
#define Config_BalancingConfig_balance_expo_tag  1
#define Config_BalancingConfig_balance_angle_scaling_tag 2
#define Config_BalancingConfig_max_start_angle_steer_tag 3
#define Config_BalancingConfig_shutoff_angle_steer_tag 4
#define Config_BalancingConfig_shutoff_angle_drive_tag 5
#define Config_BalancingConfig_max_update_limiter_tag 6
#define Config_BalancingConfig_output_lpf_hz_tag 7
#define Config_BalancingConfig_balance_d_param_limiter_tag 8
#define Config_BalancingConfig_balance_d_param_lpf_hz_tag 9
#define Config_BalancingConfig_global_gyro_lpf_tag 10
#define Config_BalancingConfig_imu_beta_tag      11
#define Config_BalancingConfig_expo_type_tag     12
#define Config_BalancingConfig_usart_control_scaling_tag 13
#define Config_PusbackSettings_min_speed_erpm_tag 1
#define Config_PusbackSettings_push_raise_speed_deg_sec_tag 3
#define Config_PusbackSettings_push_release_speed_deg_sec_tag 4
#define Config_PusbackSettings_push_angle_tag    5
#define Config_Misc_throttle_rc_tag              6
#define Config_Misc_throttle_threshold_tag       7
#define Config_Misc_duty_threshold_tag           8
#define Config_Misc_duty_rc_tag                  9
#define Config_Misc_erpm_threshold_tag           10
#define Config_Misc_erpm_rc_tag                  11
#define Config_Misc_low_volt_threshold_tag       12
#define Config_Misc_volt_rc_tag                  13
#define Config_Misc_erpm_to_dist_const_tag       15
#define Config_Misc_batt_cells_tag               16
#define Config_LoadLift_start_current_tag        1
#define Config_LoadLift_max_angle_tag            2
#define Config_LoadLift_filter_rc_tag            3
#define Config_LoadLift_multiplier_tag           4
#define Config_LoadLift_ramp_deg_sec_tag         5
#define Config_callibration_tag                  1
#define Config_angle_pid_tag                     2
#define Config_foot_pad_tag                      3
#define Config_balance_settings_tag              4
#define Config_misc_tag                          5
#define Config_pushback_tag                      6
#define Config_load_lift_tag                     7
#define Config_rate_pid_tag                      9
#define Stats_batt_voltage_tag                   1
#define Stats_batt_current_tag                   2
#define Stats_motor_current_tag                  3
#define Stats_speed_tag                          5
#define Stats_distance_traveled_tag              6
#define Stats_drive_angle_tag                    7
#define Stats_steer_angle_tag                    8
#define Stats_pad_pressure1_tag                  9
#define Stats_pad_pressure2_tag                  10
#define Stats_motor_duty_tag                     11
#define Stats_esc_temp_tag                       12
#define Stats_motor_temp_tag                     13
#define Stats_cell_voltage_tag                   14

/* Struct field encoding specification for nanopb */
#define Config_FIELDLIST(X, a) \
X(a, STATIC,   OPTIONAL, MESSAGE,  callibration,      1) \
X(a, STATIC,   REQUIRED, MESSAGE,  angle_pid,         2) \
X(a, STATIC,   REQUIRED, MESSAGE,  foot_pad,          3) \
X(a, STATIC,   REQUIRED, MESSAGE,  balance_settings,   4) \
X(a, STATIC,   REQUIRED, MESSAGE,  misc,              5) \
X(a, STATIC,   OPTIONAL, MESSAGE,  pushback,          6) \
X(a, STATIC,   OPTIONAL, MESSAGE,  load_lift,         7) \
X(a, STATIC,   REQUIRED, MESSAGE,  rate_pid,          9)
#define Config_CALLBACK NULL
#define Config_DEFAULT NULL
#define Config_callibration_MSGTYPE Config_Callibration
#define Config_angle_pid_MSGTYPE Config_PidConfig
#define Config_foot_pad_MSGTYPE Config_FootPadSettings
#define Config_balance_settings_MSGTYPE Config_BalancingConfig
#define Config_misc_MSGTYPE Config_Misc
#define Config_pushback_MSGTYPE Config_PusbackSettings
#define Config_load_lift_MSGTYPE Config_LoadLift
#define Config_rate_pid_MSGTYPE Config_PidConfig

#define Config_Callibration_FIELDLIST(X, a) \
X(a, STATIC,   REQUIRED, INT32,    acc_x,             1) \
X(a, STATIC,   REQUIRED, INT32,    acc_y,             2) \
X(a, STATIC,   REQUIRED, INT32,    acc_z,             3) \
X(a, STATIC,   OPTIONAL, FLOAT,    x_offset,          4) \
X(a, STATIC,   OPTIONAL, FLOAT,    y_offset,          5) \
X(a, STATIC,   OPTIONAL, FLOAT,    z_offset,          6)
#define Config_Callibration_CALLBACK NULL
#define Config_Callibration_DEFAULT (const pb_byte_t*)"\x08\x00\x10\x00\x18\x00\x25\x00\x00\x00\x00\x2d\x00\x00\x00\x00\x35\x00\x00\x00\x00\x00"

#define Config_PidConfig_FIELDLIST(X, a) \
X(a, STATIC,   REQUIRED, FLOAT,    p,                 1) \
X(a, STATIC,   REQUIRED, FLOAT,    d,                 2) \
X(a, STATIC,   REQUIRED, FLOAT,    i,                 3) \
X(a, STATIC,   REQUIRED, FLOAT,    max_i,             4) \
X(a, STATIC,   OPTIONAL, FLOAT,    i_expo,           13)
#define Config_PidConfig_CALLBACK NULL
#define Config_PidConfig_DEFAULT (const pb_byte_t*)"\x0d\x00\x00\x80\x3f\x15\x0a\xd7\xa3\x3b\x1d\x6f\x12\x83\x3a\x25\xa6\x9b\xc4\x3b\x6d\x00\x00\x00\x00\x00"

#define Config_FootPadSettings_FIELDLIST(X, a) \
X(a, STATIC,   REQUIRED, FLOAT,    filter_rc,         1) \
X(a, STATIC,   REQUIRED, INT32,    min_level_to_start,   2) \
X(a, STATIC,   REQUIRED, INT32,    min_level_to_continue,   3) \
X(a, STATIC,   REQUIRED, INT32,    shutoff_delay_ms,   4)
#define Config_FootPadSettings_CALLBACK NULL
#define Config_FootPadSettings_DEFAULT (const pb_byte_t*)"\x0d\xcd\xcc\x4c\x3d\x10\xe4\x19\x18\xd0\x0f\x20\x64\x00"

#define Config_BalancingConfig_FIELDLIST(X, a) \
X(a, STATIC,   REQUIRED, FLOAT,    balance_expo,      1) \
X(a, STATIC,   REQUIRED, FLOAT,    balance_angle_scaling,   2) \
X(a, STATIC,   REQUIRED, INT32,    max_start_angle_steer,   3) \
X(a, STATIC,   REQUIRED, INT32,    shutoff_angle_steer,   4) \
X(a, STATIC,   REQUIRED, INT32,    shutoff_angle_drive,   5) \
X(a, STATIC,   REQUIRED, INT32,    max_update_limiter,   6) \
X(a, STATIC,   REQUIRED, FLOAT,    output_lpf_hz,     7) \
X(a, STATIC,   REQUIRED, INT32,    balance_d_param_limiter,   8) \
X(a, STATIC,   REQUIRED, FLOAT,    balance_d_param_lpf_hz,   9) \
X(a, STATIC,   REQUIRED, UINT32,   global_gyro_lpf,  10) \
X(a, STATIC,   OPTIONAL, FLOAT,    imu_beta,         11) \
X(a, STATIC,   OPTIONAL, INT32,    expo_type,        12) \
X(a, STATIC,   OPTIONAL, FLOAT,    usart_control_scaling,  13)
#define Config_BalancingConfig_CALLBACK NULL
#define Config_BalancingConfig_DEFAULT (const pb_byte_t*)"\x0d\x9a\x99\x19\x3e\x15\x00\x00\x70\x41\x18\x0f\x20\x28\x28\x0e\x30\xac\x02\x3d\x00\x00\xc8\x42\x40\x64\x4d\x00\x00\x48\x42\x50\x02\x5d\x0a\xd7\xa3\x3c\x60\x00\x6d\x00\x00\x00\x00\x00"

#define Config_PusbackSettings_FIELDLIST(X, a) \
X(a, STATIC,   REQUIRED, INT32,    min_speed_erpm,    1) \
X(a, STATIC,   REQUIRED, FLOAT,    push_raise_speed_deg_sec,   3) \
X(a, STATIC,   REQUIRED, FLOAT,    push_release_speed_deg_sec,   4) \
X(a, STATIC,   OPTIONAL, FLOAT,    push_angle,        5)
#define Config_PusbackSettings_CALLBACK NULL
#define Config_PusbackSettings_DEFAULT (const pb_byte_t*)"\x08\xa0\x8d\x06\x1d\x00\x00\x00\x3f\x25\xcd\xcc\x4c\x3e\x2d\x00\x00\xa0\x40\x00"

#define Config_Misc_FIELDLIST(X, a) \
X(a, STATIC,   REQUIRED, FLOAT,    throttle_rc,       6) \
X(a, STATIC,   REQUIRED, FLOAT,    throttle_threshold,   7) \
X(a, STATIC,   OPTIONAL, FLOAT,    duty_threshold,    8) \
X(a, STATIC,   OPTIONAL, FLOAT,    duty_rc,           9) \
X(a, STATIC,   OPTIONAL, INT32,    erpm_threshold,   10) \
X(a, STATIC,   OPTIONAL, FLOAT,    erpm_rc,          11) \
X(a, STATIC,   OPTIONAL, FLOAT,    low_volt_threshold,  12) \
X(a, STATIC,   OPTIONAL, FLOAT,    volt_rc,          13) \
X(a, STATIC,   OPTIONAL, FLOAT,    erpm_to_dist_const,  15) \
X(a, STATIC,   OPTIONAL, INT32,    batt_cells,       16)
#define Config_Misc_CALLBACK NULL
#define Config_Misc_DEFAULT (const pb_byte_t*)"\x35\xcd\xcc\x4c\x3d\x3d\x00\x00\x40\x3f\x45\x00\x00\x40\x3f\x4d\x00\x00\x80\x3e\x50\xf0\x2e\x5d\x00\x00\x80\x3e\x65\x00\x00\x34\x42\x6d\x00\x00\x80\x3e\x7d\x00\x00\x80\x3f\x80\x01\x01\x00"

#define Config_LoadLift_FIELDLIST(X, a) \
X(a, STATIC,   REQUIRED, INT32,    start_current,     1) \
X(a, STATIC,   REQUIRED, FLOAT,    max_angle,         2) \
X(a, STATIC,   REQUIRED, FLOAT,    filter_rc,         3) \
X(a, STATIC,   REQUIRED, FLOAT,    multiplier,        4) \
X(a, STATIC,   REQUIRED, FLOAT,    ramp_deg_sec,      5)
#define Config_LoadLift_CALLBACK NULL
#define Config_LoadLift_DEFAULT (const pb_byte_t*)"\x08\x0a\x15\x00\x00\xa0\x40\x1d\xcd\xcc\x4c\x3d\x25\xcd\xcc\xcc\x3d\x2d\x00\x00\x00\x3f\x00"

#define Stats_FIELDLIST(X, a) \
X(a, STATIC,   REQUIRED, FLOAT,    batt_voltage,      1) \
X(a, STATIC,   REQUIRED, FLOAT,    batt_current,      2) \
X(a, STATIC,   REQUIRED, FLOAT,    motor_current,     3) \
X(a, STATIC,   REQUIRED, FLOAT,    speed,             5) \
X(a, STATIC,   REQUIRED, FLOAT,    distance_traveled,   6) \
X(a, STATIC,   REQUIRED, FLOAT,    drive_angle,       7) \
X(a, STATIC,   REQUIRED, FLOAT,    steer_angle,       8) \
X(a, STATIC,   REQUIRED, UINT32,   pad_pressure1,     9) \
X(a, STATIC,   REQUIRED, UINT32,   pad_pressure2,    10) \
X(a, STATIC,   REQUIRED, FLOAT,    motor_duty,       11) \
X(a, STATIC,   REQUIRED, FLOAT,    esc_temp,         12) \
X(a, STATIC,   REQUIRED, FLOAT,    motor_temp,       13) \
X(a, STATIC,   REQUIRED, FLOAT,    cell_voltage,     14)
#define Stats_CALLBACK NULL
#define Stats_DEFAULT NULL

extern const pb_msgdesc_t Config_msg;
extern const pb_msgdesc_t Config_Callibration_msg;
extern const pb_msgdesc_t Config_PidConfig_msg;
extern const pb_msgdesc_t Config_FootPadSettings_msg;
extern const pb_msgdesc_t Config_BalancingConfig_msg;
extern const pb_msgdesc_t Config_PusbackSettings_msg;
extern const pb_msgdesc_t Config_Misc_msg;
extern const pb_msgdesc_t Config_LoadLift_msg;
extern const pb_msgdesc_t Stats_msg;

/* Defines for backwards compatibility with code written before nanopb-0.4.0 */
#define Config_fields &Config_msg
#define Config_Callibration_fields &Config_Callibration_msg
#define Config_PidConfig_fields &Config_PidConfig_msg
#define Config_FootPadSettings_fields &Config_FootPadSettings_msg
#define Config_BalancingConfig_fields &Config_BalancingConfig_msg
#define Config_PusbackSettings_fields &Config_PusbackSettings_msg
#define Config_Misc_fields &Config_Misc_msg
#define Config_LoadLift_fields &Config_LoadLift_msg
#define Stats_fields &Stats_msg

/* Maximum encoded size of messages (where known) */
#define Config_BalancingConfig_size              102
#define Config_Callibration_size                 48
#define Config_FootPadSettings_size              38
#define Config_LoadLift_size                     31
#define Config_Misc_size                         63
#define Config_PidConfig_size                    25
#define Config_PusbackSettings_size              26
#define Config_size                              374
#define DRV_COMMS_CONFIG_PB_H_MAX_SIZE           Config_size
#define Stats_size                               67

#ifdef __cplusplus
} /* extern "C" */
#endif

#endif
