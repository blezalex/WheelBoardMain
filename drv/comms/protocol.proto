syntax = "proto2";
option java_package = "proto";

// CMD format:
// Byte 0: Fixed 0x1 protocol header/version
// Byte 1: packet length 3-255 (inclues all transfered bytes: header, len,
// msgId, msgBody and CRC16)
// Byte 2: message id
// Byte 3-n message body
// Byte n-1 CRC16

enum RequestId {
  MSG_NONE = 0;
  READ_CONFIG = 1;
  WRITE_CONFIG = 2;
  GET_STATS = 3;
  CALLIBRATE_ACC = 4;
  SAVE_CONFIG = 5;
}

enum ReplyId {
  NO_REPLY = 0;
  GENERIC_OK = 1;
  GENERIC_FAIL = 2;
  STATS = 3;
  CONFIG = 4;
  CRC_MISMATCH = 5;
}

message Config {
  message Callibration {
    required int32 acc_x = 1 [default = 0];
    required int32 acc_y = 2 [default = 0];
    required int32 acc_z = 3 [default = 0];
  }

  optional Callibration callibration = 1;
  
  message PidConfig {
    required float p = 1 [default = 175];
    required float d = 2 [default = 0.35];
    required float i = 3 [default = 0.05];
    required float max_i = 4 [default = 10000];
  }

  required PidConfig balance_pid = 2;

  message FootPadSettings {
    required float filter_rc = 1 [default= 0.05];
    required int32 min_level_to_start = 2 [default = 3700];
    required int32 min_level_to_continue = 3 [default = 3500];
  }

  required FootPadSettings foot_pad = 3;

  message BalancingConfig {
  	// min value is 1 = linear
	required float balance_expo = 1 [default = 1];
	
	// scale input angel in deg by deviding by 'balance_angle_scaling'
	required float balance_angle_scaling = 2 [default = 1];
  }
  
  required BalancingConfig balance_settings = 4;

  message Misc {
    required float beep_rc = 6 [default = 0.05];

  	// 0-1, 1 = 100% of output power = no warning at all
  	required float beep_threshold = 7  [default = 0.75];
  }
  
  required Misc misc = 5;
}

message Stats {
  optional float batt_voltage = 1;
  optional float batt_current = 2;
  optional float motor_current = 3;
  optional float speed = 5;
  optional float distance_traveled = 6;
  required float drive_angle = 7;
  required float stear_angle = 8;
  
  required uint32 pad_pressure1 = 9;
  required uint32 pad_pressure2 = 10;
}