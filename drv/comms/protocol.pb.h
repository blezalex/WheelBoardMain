/* Automatically generated nanopb header */
/* Generated by nanopb-0.4.6-dev */

#ifndef PB_DRV_COMMS_PROTOCOL_PB_H_INCLUDED
#define PB_DRV_COMMS_PROTOCOL_PB_H_INCLUDED
#include <pb.h>

#if PB_PROTO_HEADER_VERSION != 40
#error Regenerate this file with the current version of nanopb generator.
#endif

/* Enum definitions */
typedef enum _RequestId { 
    RequestId_MSG_NONE = 0, 
    RequestId_READ_CONFIG = 1, 
    RequestId_WRITE_CONFIG = 2, 
    RequestId_GET_STATS = 3, 
    RequestId_CALLIBRATE_ACC = 4, 
    RequestId_SAVE_CONFIG = 5, 
    RequestId_GET_DEBUG_BUFFER = 6, 
    RequestId_SET_DEBUG_STREAM_ID = 7, 
    RequestId_TOGGLE_PASSTHROUGH = 8, 
    RequestId_GET_CONFIG_DESCRIPTOR = 9 
} RequestId;

typedef enum _ReplyId { 
    ReplyId_NO_REPLY = 0, 
    ReplyId_GENERIC_OK = 1, 
    ReplyId_GENERIC_FAIL = 2, 
    ReplyId_STATS = 3, 
    ReplyId_CONFIG = 4, 
    ReplyId_CRC_MISMATCH = 5, 
    ReplyId_DEBUG_BUFFER = 6, 
    ReplyId_CONFIG_DESCRIPTOR = 7 
} ReplyId;

/* Struct definitions */
typedef struct _Stats { 
    float batt_voltage; 
    float batt_current; 
    float motor_current; 
    float speed; 
    float distance_traveled; 
    float drive_angle; 
    float stear_angle; 
    uint32_t pad_pressure1; 
    uint32_t pad_pressure2; 
    float motor_duty; 
    float esc_temp; 
    float motor_temp; 
} Stats;


/* Helper constants for enums */
#define _RequestId_MIN RequestId_MSG_NONE
#define _RequestId_MAX RequestId_GET_CONFIG_DESCRIPTOR
#define _RequestId_ARRAYSIZE ((RequestId)(RequestId_GET_CONFIG_DESCRIPTOR+1))

#define _ReplyId_MIN ReplyId_NO_REPLY
#define _ReplyId_MAX ReplyId_CONFIG_DESCRIPTOR
#define _ReplyId_ARRAYSIZE ((ReplyId)(ReplyId_CONFIG_DESCRIPTOR+1))


#ifdef __cplusplus
extern "C" {
#endif

/* Initializer values for message structs */
#define Stats_init_default                       {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0}
#define Stats_init_zero                          {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0}

/* Field tags (for use in manual encoding/decoding) */
#define Stats_batt_voltage_tag                   1
#define Stats_batt_current_tag                   2
#define Stats_motor_current_tag                  3
#define Stats_speed_tag                          5
#define Stats_distance_traveled_tag              6
#define Stats_drive_angle_tag                    7
#define Stats_stear_angle_tag                    8
#define Stats_pad_pressure1_tag                  9
#define Stats_pad_pressure2_tag                  10
#define Stats_motor_duty_tag                     11
#define Stats_esc_temp_tag                       12
#define Stats_motor_temp_tag                     13

/* Struct field encoding specification for nanopb */
#define Stats_FIELDLIST(X, a) \
X(a, STATIC,   REQUIRED, FLOAT,    batt_voltage,      1) \
X(a, STATIC,   REQUIRED, FLOAT,    batt_current,      2) \
X(a, STATIC,   REQUIRED, FLOAT,    motor_current,     3) \
X(a, STATIC,   REQUIRED, FLOAT,    speed,             5) \
X(a, STATIC,   REQUIRED, FLOAT,    distance_traveled,   6) \
X(a, STATIC,   REQUIRED, FLOAT,    drive_angle,       7) \
X(a, STATIC,   REQUIRED, FLOAT,    stear_angle,       8) \
X(a, STATIC,   REQUIRED, UINT32,   pad_pressure1,     9) \
X(a, STATIC,   REQUIRED, UINT32,   pad_pressure2,    10) \
X(a, STATIC,   REQUIRED, FLOAT,    motor_duty,       11) \
X(a, STATIC,   REQUIRED, FLOAT,    esc_temp,         12) \
X(a, STATIC,   REQUIRED, FLOAT,    motor_temp,       13)
#define Stats_CALLBACK NULL
#define Stats_DEFAULT NULL

extern const pb_msgdesc_t Stats_msg;

/* Defines for backwards compatibility with code written before nanopb-0.4.0 */
#define Stats_fields &Stats_msg

/* Maximum encoded size of messages (where known) */
#define Stats_size                               62

#ifdef __cplusplus
} /* extern "C" */
#endif

#endif
